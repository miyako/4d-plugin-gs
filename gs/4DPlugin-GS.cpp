/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-GS.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : GS
 #	author : miyako
 #	2020/05/15
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-GS.h"

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- GS
            
			case 1 :
				GS(params);
				break;

        }

	}
	catch(...)
	{

	}
}

#pragma mark -

void GS(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
        ARRAY_TEXT Param1;
        C_LONGINT returnValue;

        Param1.fromParamAtIndex(pParams, 1);

        void *minst;
        
    #if VERSIONMAC
        std::vector<std::string>_gsargv;
    #else
        std::vector<std::wstring>_gsargv;
    #endif
        
        std::vector<char *>gsargv;
        
        for(unsigned int i = 0;i < Param1.getSize();++i)
        {
    #if VERSIONMAC
            std::string _argv;
            CUTF8String _u8;
            Param1.copyUTF8StringAtIndex(&_u8, i);
            _argv = std::string((const char *)_u8.c_str(), _u8.length());
    #else
            std::wstring _argv;
            CUTF16String _u16;
            Param1.copyUTF16StringAtIndex(&_u16, i);
            _argv = std::wstring((const wchar_t *)_u16.c_str(), _u16.length());
    #endif
            _gsargv.push_back(_argv);
            
        }
        
        for(unsigned int i = 0;i < Param1.getSize();++i)
        {
            gsargv.push_back((char *)(_gsargv.at(i).c_str()));
        }
        
        int gsargc = (int)gsargv.size();
        
        if(gsapi_new_instance(&minst, NULL) == 0)
        {
    #if VERSIONMAC
            gsapi_set_arg_encoding(minst, GS_ARG_ENCODING_UTF8);
    #else
            gsapi_set_arg_encoding(minst, GS_ARG_ENCODING_UTF16LE);
    #endif
            
            returnValue.setIntValue(gsapi_init_with_args(minst, gsargc, (char **)&gsargv[0]));

            gsapi_exit(minst);//finalises the output
            gsapi_delete_instance(minst);
        }
        
        returnValue.setReturn(pResult);
}

